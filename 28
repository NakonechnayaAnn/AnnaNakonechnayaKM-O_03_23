function fib(n)
    a, b = 1, 1
    while n>0
        b, a = a+b, b
        n -= 1
    end
    return a
end

function rec(n)
    if n in (0,1)
        return 1
    end
    return rec(n-1) + rec(n-2)
end

function memoize_fibonacci(n::Integer)
    dict = Dict{Int,Int}() 
    function fib_recurs(n)
        if n in (0,1)
            return 1
        end
        if n-2 ∉ dict.keys
            f_prevprev = fib_recurs(n-2)
        else
            f_prevprev = dict[n-2]
        end
        if n-1 ∉ dict.keys
            f_prev = fib_recurs(n-1)
        else
            f_prev = dict[n-1]
        end
        return f_prevprev + f_prev  
    end
end
